<!--RGB-->
<!--openCV: BGR-->
<!--Images Coordinate: "x:L to R" "y:TOP to BOTTOM" right-hand rule-->
<!--Node -> Topic: /image_raw("sensor_msgs/lmage" or "sensor_msgs/compressedlmage") -> Algorithms&Stuff-->
<!--The unprocessed Image topic published directly by a camera driver is often called /image_raw-->
<!--The processed call /image_raw/compressed-->
<!--ROS provides the image_transport tools can handle all the compression/decompressions automatically -->
<!--sensor_msgs/CameraInfo provides more camera data.  This Topic will call : /camera_info-->
<!-- image_proc/image_pipeline packages to assist in converting the /image_raw topic into more useful data-->
<!---->

<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" >

    <joint name="camera_joint" type="fixed">
        <parent link="chassis"/>
        <child link="camera_link"/>
        <origin xyz="0.276 0 0.181" rpy="0 0.18 0"/>
    </joint>

    <link name="camera_link">
        <visual>
            <geometry>
                <box size="0.010 0.03 0.03"/>
            </geometry>
            <material name="black"/>
        </visual>
        <visual>
            <origin xyz="0 0 -0.05"/>
            <geometry>
                <cylinder radius="0.002" length="0.1"/>
            </geometry>
            <material name="black"/>
        </visual>
    </link>

<!--add the “dummy” link called camera_link_optical to account for the different coordinate standards-->
    <joint name="camera_optical_joint" type="fixed">
        <parent link="camera_link"/>    <!--camer_link -> camera_optical_joint-->
        <child link="camera_link_optical"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <link name="camera_link_optical"></link>


    <!--simulate a sensor in Gazebo-->
    <gazebo reference="camera_link">    
        <material>Gazebo/Black</material>

        <sensor name="camera" type="camera">
            <pose> 0 0 0 0 0 0 </pose>
            <visualize>true</visualize>
            <update_rate>10</update_rate>   <!--10Hz-->
            <camera>
                <horizontal_fov>1.089</horizontal_fov>
                <image>
                    <format>R16G16B16</format>
                    <width>640</width>
                    <height>480</height>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>8.0</far>
                </clip>
            </camera>
            <!-- get data in and out of Gazebo using the libgazebo_ros_camera.so plugin-->
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <frame_name>camera_link_optical</frame_name>    <!---->
            </plugin>
        </sensor>
    </gazebo>

</robot>